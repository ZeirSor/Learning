<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>gjPath</Title>
			<Shortcut>gjPath</Shortcut>
			<Description>gjPath的代码片段</Description>
			<Author>Myself</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="cpp">
				<![CDATA[int getIndex(int* tp, int i, Graph *G)
{
	int index;
	for (int j = 0; j < G->vexNum; j++)
	{
		if (tp[j] == i)
		{
			index = j;
			break;
		}
	}
	return index;
}

void CriticalPath(Graph* G, int* tp)
{
	int* early = (int*)malloc(sizeof(int) * G->vexNum);
	int* late = (int*)malloc(sizeof(int) * G->vexNum);
	for (int i = 0; i < G->vexNum; i++)
		early[i] = late[i] = 0;

	for (int i = 1; i < G->vexNum; i++)
	{
		int index = getIndex(tp, i, G);
		int max = 0;
		for (int j = 0; j < index; j++)
		{
			if (G->arcs[tp[j]][i] > 0 && G->arcs[tp[j]][i] != MAX)
			{
				if (G->arcs[tp[j]][i] + early[tp[j]] > max)
				{
					max = G->arcs[tp[j]][i] + early[tp[j]];
				}
			}
		}
		early[i] = max;
	}

	printf("early[]:\n\t");
	for (int i = 0; i < G->vexNum; i++)
		printf("\t%d", early[i]);

	late[(G->vexNum) - 1] = early[(G->vexNum) - 1];
	for (int i = G->vexNum - 2; i >= 0; i--)
	{
		int min = late[(G->vexNum) - 1];
		int index2 = getIndex(tp, i, G);
		for (int j = (G->vexNum) - 1; j  > index2; j--)
		{
			if (G->arcs[i][tp[j]] > 0 && G->arcs[i][tp[j]] != MAX)
			{
				if (late[tp[j]] - G->arcs[i][tp[j]] < min)
				{
					min = late[tp[j]] - G->arcs[i][tp[j]];
				}
			}
		}
		late[i] = min;
	}

	printf("\nlate[]:\n\t");
	for (int i = 0; i < G->vexNum; i++)
		printf("\t%d", late[i]);

	printf("\n关键路径：\n\t");
	for (int i = 0; i < G->vexNum; i++) {
		int index_c = getIndex(tp, i, G);
		for (int j = 0; j < index_c; j++) {
			if (G->arcs[tp[j]][i] > 0 && G->arcs[tp[j]][i] != MAX) {
				if (late[i] - G->arcs[tp[j]][i] == early[tp[j]]) {
					printf("\t%d -(%d)-> %d", tp[j], G->arcs[tp[j]][i], i);
				}
			}
		}
	}
	printf("\n" );
}



int* VE;	//记录时间最早发生时间的数组
int* VL;	//记录时间最晚发生时间的数组
int* stack_TpOrder;//存储拓扑序列的栈
int top_TpOrder;

int ToologicalSort(ALGraph* GL)
{
	printf("拓扑序列为：\n\n\t");

	int count = 0;		//记录已经输出的顶点数量

	int* stack = (int*)malloc(sizeof(int) * GL->vexNum);	//顺序栈
	int top = -1;		//规定为-1,方便后续操作
	int getTop;			//取栈顶值
	//栈里的值为顶点对应的序号

	for (int i = 0; i < GL->vexNum; i++)
		if (GL->List[i].in == 0)		//将入度为0的顶点入栈
			stack[++top] = i;			//top记得++

//******************************************************************
	top_TpOrder = -1;										//初始化
	VE = (int*)malloc(sizeof(int) * GL->vexNum);			//初始化
	for (int i = 0; i < GL->vexNum; i++)				 //初始化为0
		VE[i] = 0;
	stack_TpOrder = (int*)malloc(sizeof(int) * GL->vexNum);	//初始化
//******************************************************************

	arcNode* e;			//用来遍历顶点对应的边表
	int flag = 0;		//控制"->"的输出数量
	while (top != -1)	//栈非空
	{
		getTop = stack[top--];		//取栈顶值并出栈
		printf("V%d", (int)(GL->List[getTop].vex - 'a'));	//输出序列
		if (flag != GL->vexNum - 1)		//n个顶点应该有n-1个"->"
		{
			printf(" -> ");
			flag++;
		}
		count++;	//已输出顶点数++

//******************************************************************************
		stack_TpOrder[++top_TpOrder] = getTop;	//将弹出的顶点序号压入拓扑序列栈
//******************************************************************************

		for (e = GL->List[getTop].First; e; e = e->next)	//遍历边表
		{
			int k = e->vex_num;		//k记录当前顶点序号
			GL->List[k].in--;		//由于上个顶点以删除,故入度-1
			if (GL->List[k].in == 0)	//将入度为0的顶点入栈
				stack[++top] = k;

//***********************************************************************		
			if (VE[getTop] + e->weight > VE[k])		// 求各顶点时间的					
				VE[k] = VE[getTop] + e->weight;		//最早发生时间VE的值
//***********************************************************************

		}
	}
	printf("\n");
	printf("\n");

	printf("最早发生时间的数组VE：\n\n");
	printf("\t序号\t");
	for (int i = 0; i < GL->vexNum; i++)
		printf("%d\t", i);
	printf("\n\n\t\t");
	for (int i = 0; i < GL->vexNum; i++)
		printf("%d\t", VE[i]);
	printf("\n");

	if (count < GL->vexNum)		//输出顶点数量小于总顶点数说明存在环路
	{
		printf("\t有环！\n");
		return 0;
	}
	else
		return 1;
}

void CriticalPath(ALGraph* GL)
{
	int ete, lte;		//声明活动最早发生时间和最晚发生时间的变量
	int getTop;			//取栈顶值
	ToologicalSort(GL);	//先进行拓扑排序，保存拓扑序列栈，计算各顶点最早发生时间VE数组的值
	
	VL = (int*)malloc(sizeof(int) * GL->vexNum);
	for (int i = 0; i < GL->vexNum; i++)
		VL[i] = VE[GL->vexNum - 1];

	while (top_TpOrder != -1)
	{
		getTop = stack_TpOrder[top_TpOrder--];
		for (arcNode* e = GL->List[getTop].First ; e; e = e->next)
		{
			int k = e->vex_num;
			if (VL[k] - e->weight < VL[getTop])
				VL[getTop] = VL[k] - e->weight;
		}
	}

	printf("最晚发生时间的数组VL：\n\n");
	printf("\t序号\t");
	for (int i = 0; i < GL->vexNum; i++)
		printf("%d\t", i);
	printf("\n\n\t\t");
	for (int i = 0; i < GL->vexNum; i++)
		printf("%d\t", VL[i]);
	printf("\n");

	printf("\n关键路径为：\n\t");
	for (int j = 0; j < GL->vexNum; j++)
	{
		for (arcNode* e = GL->List[j].First; e; e = e->next)
		{
			int k = e->vex_num;
			ete = VE[j];
			lte = VL[k] - e->weight;
			if (ete == lte)
			{
				if (j == 0)
					printf("V%d ", (int)(GL->List[j].vex - 'a'));
				printf("-->");
				printf(" V%d ", (int)(GL->List[k].vex - 'a'));
			}
		}
	}
	printf("\n");
}
]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>